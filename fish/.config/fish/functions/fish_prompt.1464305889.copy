
set fish_git_dirty_color red
set fish_git_not_dirty_color green

function parse_git_branch
  set -l branch (git branch 2> /dev/null | grep -e '\* ' | sed 's/^..\(.*\)/\1/')
  set -l git_diff (git diff)

  if test -n "$git_diff"
    echo (set_color $fish_git_dirty_color)$branch(set_color normal)
  else
    echo (set_color $fish_git_not_dirty_color)$branch(set_color normal)
  end
end


function fish_prompt
  set -l git_dir (git rev-parse --git-dir 2> /dev/null)
  if test -n "$git_dir"
    printf '%s@%s %s%s%s:%s> ' (set_color $fish_color_cwd) (prompt_pwd) (set_color normal) (parse_git_branch)
  else
    printf '%s@%s %s%s%s> ' (set_color $fish_color_cwd) (prompt_pwd) (set_color normal)
  end
end


#function fish_prompt --description 'Write out the prompt'
#	# Just calculate this once, to save a few cycles when displaying the prompt
#	if not set -q __fish_prompt_hostname
#		set -g __fish_prompt_hostname (hostname|cut -d . -f 1)
#	end
#
#	set -l color_cwd
#	set -l suffix
#	switch $USER
#	case root toor
#		if set -q fish_color_cwd_root
#			set color_cwd $fish_color_cwd_root
#		else
#			set color_cwd $fish_color_cwd
#		end
#		set suffix '#'
#	case '*'
#		set color_cwd $fish_color_cwd
#		set suffix '>'
#	end
#
#	echo -n -s "$USER" @ "$__fish_prompt_hostname" ' ' (set_color $color_cwd) (prompt_pwd) (set_color normal) "$suffix "
#end
